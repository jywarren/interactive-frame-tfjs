"use strict";
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
function validateModelConfig(modelConfig) {
    var config = modelConfig == null ? constants_1.MOVENET_CONFIG : __assign({}, modelConfig);
    if (!modelConfig.modelType) {
        modelConfig.modelType = 'SinglePose.Lightning';
    }
    else if (constants_1.VALID_MODELS.indexOf(config.modelType) < 0) {
        throw new Error("Invalid architecture " + config.modelType + ". " +
            ("Should be one of " + constants_1.VALID_MODELS));
    }
    if (config.enableSmoothing == null) {
        config.enableSmoothing = true;
    }
    return config;
}
exports.validateModelConfig = validateModelConfig;
function validateEstimationConfig(estimationConfig) {
    var config = estimationConfig == null ?
        constants_1.MOVENET_SINGLE_POSE_ESTIMATION_CONFIG : __assign({}, estimationConfig);
    if (!config.maxPoses) {
        config.maxPoses = 1;
    }
    if (config.maxPoses <= 0 || config.maxPoses > 1) {
        throw new Error("Invalid maxPoses " + config.maxPoses + ". Should be 1.");
    }
    return config;
}
exports.validateEstimationConfig = validateEstimationConfig;
//# sourceMappingURL=detector_utils.js.map