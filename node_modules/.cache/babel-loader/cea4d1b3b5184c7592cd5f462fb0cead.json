{"ast":null,"code":"import _inherits from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlobal } from './global_util';\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\n\nexport var TensorBuffer = /*#__PURE__*/function () {\n  function TensorBuffer(shape, dtype, values) {\n    var _this = this;\n\n    _classCallCheck(this, TensorBuffer);\n\n    this.dtype = dtype;\n    this.shape = shape.slice();\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      var n = values.length;\n      util.assert(n === this.size, function () {\n        return \"Length of values '\".concat(n, \"' does not match the size \") + \"inferred by the shape '\".concat(_this.size, \"'.\");\n      });\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create \" + \"a TensorBuffer for the real and imaginary parts separately and \" + \"call tf.complex(real, imag).\");\n    }\n\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n\n\n  _createClass(TensorBuffer, [{\n    key: \"set\",\n    value: function set(value) {\n      var _this2 = this;\n\n      for (var _len = arguments.length, locs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        locs[_key - 1] = arguments[_key];\n      }\n\n      if (locs.length === 0) {\n        locs = [0];\n      }\n\n      util.assert(locs.length === this.rank, function () {\n        return \"The number of provided coordinates (\".concat(locs.length, \") must \") + \"match the rank (\".concat(_this2.rank, \")\");\n      });\n      var index = this.locToIndex(locs);\n      this.values[index] = value;\n    }\n    /**\n     * Returns the value in the buffer at the provided location.\n     *\n     * @param locs The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      for (var _len2 = arguments.length, locs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        locs[_key2] = arguments[_key2];\n      }\n\n      if (locs.length === 0) {\n        locs = [0];\n      }\n\n      var i = 0;\n\n      for (var _i = 0, _locs = locs; _i < _locs.length; _i++) {\n        var loc = _locs[_i];\n\n        if (loc < 0 || loc >= this.shape[i]) {\n          var msg = \"Requested out of range element at \".concat(locs, \". \") + \"  Buffer shape=\".concat(this.shape);\n          throw new Error(msg);\n        }\n\n        i++;\n      }\n\n      var index = locs[locs.length - 1];\n\n      for (var _i2 = 0; _i2 < locs.length - 1; ++_i2) {\n        index += this.strides[_i2] * locs[_i2];\n      }\n\n      return this.values[index];\n    }\n  }, {\n    key: \"locToIndex\",\n    value: function locToIndex(locs) {\n      if (this.rank === 0) {\n        return 0;\n      } else if (this.rank === 1) {\n        return locs[0];\n      }\n\n      var index = locs[locs.length - 1];\n\n      for (var i = 0; i < locs.length - 1; ++i) {\n        index += this.strides[i] * locs[i];\n      }\n\n      return index;\n    }\n  }, {\n    key: \"indexToLoc\",\n    value: function indexToLoc(index) {\n      if (this.rank === 0) {\n        return [];\n      } else if (this.rank === 1) {\n        return [index];\n      }\n\n      var locs = new Array(this.shape.length);\n\n      for (var i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / this.strides[i]);\n        index -= locs[i] * this.strides[i];\n      }\n\n      locs[locs.length - 1] = index;\n      return locs;\n    }\n  }, {\n    key: \"rank\",\n    get: function get() {\n      return this.shape.length;\n    }\n    /**\n     * Creates an immutable `tf.Tensor` object from the buffer.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n\n  }, {\n    key: \"toTensor\",\n    value: function toTensor() {\n      return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n  }]);\n\n  return TensorBuffer;\n}(); // For tracking tensor creation and disposal.\n\nvar trackerFn = null; // Used by chaining methods to call into ops.\n\nvar opHandler = null; // Used to warn about deprecated methods.\n\nvar deprecationWarningFn = null; // This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\n\nexport function setTensorTracker(fn) {\n  trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\n\nexport function setOpHandler(handler) {\n  opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\n\nexport function setDeprecationWarningFn(fn) {\n  deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\n\nexport var Tensor = /*#__PURE__*/function () {\n  function Tensor(shape, dtype, dataId, id) {\n    _classCallCheck(this, Tensor);\n\n    /** Whether this tensor has been globally kept. */\n    this.kept = false;\n    this.isDisposedInternal = false;\n    this.shape = shape.slice();\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';\n  }\n\n  _createClass(Tensor, [{\n    key: \"rank\",\n    get: function get() {\n      return this.shape.length;\n    }\n    /**\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"buffer\",\n    value: function () {\n      var _buffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var vals;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.data();\n\n              case 2:\n                vals = _context.sent;\n                return _context.abrupt(\"return\", opHandler.buffer(this.shape, this.dtype, vals));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function buffer() {\n        return _buffer.apply(this, arguments);\n      }\n\n      return buffer;\n    }()\n    /**\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"bufferSync\",\n    value: function bufferSync() {\n      return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * asynchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"array\",\n    value: function () {\n      var _array = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var vals;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.data();\n\n              case 2:\n                vals = _context2.sent;\n                return _context2.abrupt(\"return\", toNestedArray(this.shape, vals, this.dtype === 'complex64'));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function array() {\n        return _array.apply(this, arguments);\n      }\n\n      return array;\n    }()\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * synchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"arraySync\",\n    value: function arraySync() {\n      return toNestedArray(this.shape, this.dataSync(), this.dtype === 'complex64');\n    }\n    /**\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n     * promise of `TypedArray` that resolves when the computation has finished.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"data\",\n    value: function () {\n      var _data = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var data, bytes;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.throwIfDisposed();\n                data = trackerFn().read(this.dataId);\n\n                if (!(this.dtype === 'string')) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                _context3.next = 5;\n                return data;\n\n              case 5:\n                bytes = _context3.sent;\n                _context3.prev = 6;\n                return _context3.abrupt(\"return\", bytes.map(function (b) {\n                  return util.decodeString(b);\n                }));\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](6);\n                throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n\n              case 13:\n                return _context3.abrupt(\"return\", data);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 10]]);\n      }));\n\n      function data() {\n        return _data.apply(this, arguments);\n      }\n\n      return data;\n    }()\n    /**\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n     * UI thread until the values are ready, which can cause performance issues.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"dataSync\",\n    value: function dataSync() {\n      this.throwIfDisposed();\n      var data = trackerFn().readSync(this.dataId);\n\n      if (this.dtype === 'string') {\n        try {\n          return data.map(function (b) {\n            return util.decodeString(b);\n          });\n        } catch (_a) {\n          throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n        }\n      }\n\n      return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n\n  }, {\n    key: \"bytes\",\n    value: function () {\n      var _bytes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.throwIfDisposed();\n                _context4.next = 3;\n                return trackerFn().read(this.dataId);\n\n              case 3:\n                data = _context4.sent;\n\n                if (!(this.dtype === 'string')) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", data);\n\n              case 8:\n                return _context4.abrupt(\"return\", new Uint8Array(data.buffer));\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function bytes() {\n        return _bytes.apply(this, arguments);\n      }\n\n      return bytes;\n    }()\n    /**\n     * Disposes `tf.Tensor` from memory.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.isDisposed) {\n        return;\n      }\n\n      trackerFn().disposeTensor(this);\n      this.isDisposedInternal = true;\n    }\n  }, {\n    key: \"isDisposed\",\n    get: function get() {\n      return this.isDisposedInternal;\n    }\n  }, {\n    key: \"throwIfDisposed\",\n    value: function throwIfDisposed() {\n      if (this.isDisposed) {\n        throw new Error(\"Tensor is disposed.\");\n      }\n    }\n    /**\n     * Prints the `tf.Tensor`. See `tf.print` for details.\n     *\n     * @param verbose Whether to print verbose information about the tensor,\n     *    including dtype and size.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"print\",\n    value: function print() {\n      var verbose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return opHandler.print(this, verbose);\n    }\n    /**\n     * Returns a copy of the tensor. See `tf.clone` for details.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      this.throwIfDisposed();\n      return opHandler.clone(this);\n    }\n    /**\n     * Returns a human-readable description of the tensor. Useful for logging.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var verbose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var vals = this.dataSync();\n      return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(dtype) {\n      this.throwIfDisposed();\n      return opHandler.cast(this, dtype);\n    }\n  }, {\n    key: \"variable\",\n    value: function variable() {\n      var trainable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var name = arguments.length > 1 ? arguments[1] : undefined;\n      var dtype = arguments.length > 2 ? arguments[2] : undefined;\n      this.throwIfDisposed();\n      return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n  }]);\n\n  return Tensor;\n}();\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: function value(instance) {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;\n  }\n});\nexport function getGlobalTensorClass() {\n  // Use getGlobal so that we can augment the Tensor class across package\n  // boundaries becase the node resolution alg may result in different modules\n  // being returned for this file depending on the path they are loaded from.\n  return getGlobal('Tensor', function () {\n    return Tensor;\n  });\n} // Global side effect. Cache global reference to Tensor class\n\ngetGlobalTensorClass();\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\n\nexport var Variable = /*#__PURE__*/function (_Tensor) {\n  _inherits(Variable, _Tensor);\n\n  var _super = _createSuper(Variable);\n\n  function Variable(initialValue, trainable, name, tensorId) {\n    var _this3;\n\n    _classCallCheck(this, Variable);\n\n    _this3 = _super.call(this, initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    _this3.trainable = trainable;\n    _this3.name = name;\n    return _this3;\n  }\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n\n\n  _createClass(Variable, [{\n    key: \"assign\",\n    value: function assign(newValue) {\n      if (newValue.dtype !== this.dtype) {\n        throw new Error(\"dtype of the new value (\".concat(newValue.dtype, \") and \") + \"previous value (\".concat(this.dtype, \") must match\"));\n      }\n\n      if (!util.arraysEqual(newValue.shape, this.shape)) {\n        throw new Error(\"shape of the new value (\".concat(newValue.shape, \") and \") + \"previous value (\".concat(this.shape, \") must match\"));\n      }\n\n      trackerFn().disposeTensor(this);\n      this.dataId = newValue.dataId;\n      trackerFn().incRef(this, null\n      /* backend */\n      );\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      trackerFn().disposeVariable(this);\n      this.isDisposedInternal = true;\n    }\n  }]);\n\n  return Variable;\n}(Tensor);\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: function value(instance) {\n    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;\n  }\n});","map":{"version":3,"sources":["../src/tensor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlobal} from './global_util';\nimport {tensorToString} from './tensor_format';\nimport {ArrayMap, BackendValues, DataType, DataTypeMap, DataValues, NumericDataType, Rank, ShapeMap, SingleValueMap, TypedArray} from './types';\nimport * as util from './util';\nimport {computeStrides, toNestedArray} from './util';\n\nexport interface TensorData<D extends DataType> {\n  dataId?: DataId;\n  values?: DataTypeMap[D];\n}\n\n// This interface mimics KernelBackend (in backend.ts), which would create a\n// circular dependency if imported.\nexport interface Backend {}\n\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer<R extends Rank, D extends DataType = 'float32'> {\n  size: number;\n  shape: ShapeMap[R];\n  strides: number[];\n  values: DataTypeMap[D];\n\n  constructor(shape: ShapeMap[R], public dtype: D, values?: DataTypeMap[D]) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(\n          n === this.size,\n          () => `Length of values '${n}' does not match the size ` +\n              `inferred by the shape '${this.size}'.`);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `complex64 dtype TensorBuffers are not supported. Please create ` +\n          `a TensorBuffer for the real and imaginary parts separately and ` +\n          `call tf.complex(real, imag).`);\n    }\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  set(value: SingleValueMap[D], ...locs: number[]): void {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    util.assert(\n        locs.length === this.rank,\n        () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n\n    const index = this.locToIndex(locs);\n    this.values[index] = value as number;\n  }\n\n  /**\n   * Returns the value in the buffer at the provided location.\n   *\n   * @param locs The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  get(...locs: number[]): SingleValueMap[D] {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    let i = 0;\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` +\n            `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n      i++;\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return this.values[index] as SingleValueMap[D];\n  }\n\n  locToIndex(locs: number[]): number {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return index;\n  }\n\n  indexToLoc(index: number): number[] {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n    const locs: number[] = new Array(this.shape.length);\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n\n  /**\n   * Creates an immutable `tf.Tensor` object from the buffer.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  toTensor(): Tensor<R> {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype) as\n        Tensor<R>;\n  }\n}\n\nexport interface TensorTracker {\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: Backend): Tensor;\n  makeVariable(\n      initialValue: Tensor, trainable?: boolean, name?: string,\n      dtype?: DataType): Variable;\n  incRef(a: Tensor, backend: Backend): void;\n  disposeTensor(t: Tensor): void;\n  disposeVariable(v: Variable): void;\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n}\n\n/**\n * The Tensor class calls into this handler to delegate chaining operations.\n */\nexport interface OpHandler {\n  cast<T extends Tensor>(x: T, dtype: DataType): T;\n  buffer<R extends Rank, D extends DataType>(\n      shape: ShapeMap[R], dtype: D,\n      values?: DataTypeMap[D]): TensorBuffer<R, D>;\n  print<T extends Tensor>(x: T, verbose: boolean): void;\n  clone<T extends Tensor>(x: T): T;\n  // TODO(yassogba) bring reshape back?\n}\n\n// For tracking tensor creation and disposal.\nlet trackerFn: () => TensorTracker = null;\n// Used by chaining methods to call into ops.\nlet opHandler: OpHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn: (msg: string) => void = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn: () => TensorTracker) {\n  trackerFn = fn;\n}\n\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler: OpHandler) {\n  opHandler = handler;\n}\n\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn: (msg: string) => void) {\n  deprecationWarningFn = fn;\n}\n\n/**\n * We wrap data id since we use weak map to avoid memory leaks.\n * Since we have our own memory management, we have a reference counter\n * mapping a tensor to its data, so there is always a pointer (even if that\n * data is otherwise garbage collectable).\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\n * Global_Objects/WeakMap\n */\nexport type DataId = object;  // object instead of {} to force non-primitive.\n\n// Declare this namespace to make Tensor class augmentation work in google3.\nexport declare namespace Tensor {}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor<R extends Rank = Rank> {\n  /** Unique id of this tensor. */\n  readonly id: number;\n  /**\n   * Id of the bucket holding the data for this tensor. Multiple arrays can\n   * point to the same bucket (e.g. when calling array.reshape()).\n   */\n  dataId: DataId;\n  /** The shape of the tensor. */\n  readonly shape: ShapeMap[R];\n  /** Number of elements in the tensor. */\n  readonly size: number;\n  /** The data type for the array. */\n  readonly dtype: DataType;\n  /** The rank type for the array (see `Rank` enum). */\n  readonly rankType: R;\n\n  /** Whether this tensor has been globally kept. */\n  kept = false;\n  /** The id of the scope this tensor is being tracked in. */\n  scopeId: number;\n\n  /**\n   * Number of elements to skip in each dimension when indexing. See\n   * https://docs.scipy.org/doc/numpy/reference/generated/\\\n   * numpy.ndarray.strides.html\n   */\n  readonly strides: number[];\n\n  constructor(shape: ShapeMap[R], dtype: DataType, dataId: DataId, id: number) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher') as R;\n  }\n\n  get rank(): number {\n    return this.shape.length;\n  }\n\n  /**\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async buffer<D extends DataType = 'float32'>(): Promise<TensorBuffer<R, D>> {\n    const vals = await this.data<D>();\n    return opHandler.buffer(this.shape, this.dtype as D, vals);\n  }\n\n  /**\n   * Returns a `tf.TensorBuffer` that holds the underlying data.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  bufferSync<D extends DataType = 'float32'>(): TensorBuffer<R, D> {\n    return opHandler.buffer(this.shape, this.dtype as D, this.dataSync());\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * asynchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async array(): Promise<ArrayMap[R]> {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals, this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * synchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  arraySync(): ArrayMap[R] {\n    return toNestedArray(\n               this.shape, this.dataSync(), this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n   * promise of `TypedArray` that resolves when the computation has finished.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]> {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      const bytes = await data as Uint8Array[];\n      try {\n        return bytes.map(b => util.decodeString(b)) as DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as Promise<DataTypeMap[D]>;\n  }\n\n  /**\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n   * UI thread until the values are ready, which can cause performance issues.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D] {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n    if (this.dtype === 'string') {\n      try {\n        return (data as Uint8Array[]).map(b => util.decodeString(b)) as\n            DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as DataTypeMap[D];\n  }\n\n  /** Returns the underlying bytes of the tensor's data. */\n  async bytes(): Promise<Uint8Array[]|Uint8Array> {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      return data as Uint8Array[];\n    } else {\n      return new Uint8Array((data as TypedArray).buffer);\n    }\n  }\n\n  /**\n   * Disposes `tf.Tensor` from memory.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  protected isDisposedInternal = false;\n  get isDisposed(): boolean {\n    return this.isDisposedInternal;\n  }\n\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n\n  /**\n   * Prints the `tf.Tensor`. See `tf.print` for details.\n   *\n   * @param verbose Whether to print verbose information about the tensor,\n   *    including dtype and size.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  print(verbose = false): void {\n    return opHandler.print(this, verbose);\n  }\n\n  /**\n   * Returns a copy of the tensor. See `tf.clone` for details.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  clone<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n\n  /**\n   * Returns a human-readable description of the tensor. Useful for logging.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  toString(verbose = false): string {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n\n  cast<T extends this>(dtype: DataType): T {\n    this.throwIfDisposed();\n    return opHandler.cast(this as T, dtype);\n  }\n  variable(trainable = true, name?: string, dtype?: DataType): Variable<R> {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype) as\n        Variable<R>;\n  }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: (instance: Tensor) => {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null &&\n        instance.throwIfDisposed != null;\n  }\n});\n\nexport function getGlobalTensorClass() {\n  // Use getGlobal so that we can augment the Tensor class across package\n  // boundaries becase the node resolution alg may result in different modules\n  // being returned for this file depending on the path they are loaded from.\n  return getGlobal('Tensor', () => {\n    return Tensor;\n  });\n}\n\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n\nexport interface NumericTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: NumericDataType;\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D];\n  data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]>;\n}\n\nexport interface StringTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: 'string';\n  dataSync<D extends DataType = 'string'>(): DataTypeMap[D];\n  data<D extends DataType = 'string'>(): Promise<DataTypeMap[D]>;\n}\n\n/** @doclink Tensor */\nexport type Scalar = Tensor<Rank.R0>;\n/** @doclink Tensor */\nexport type Tensor1D = Tensor<Rank.R1>;\n/** @doclink Tensor */\nexport type Tensor2D = Tensor<Rank.R2>;\n/** @doclink Tensor */\nexport type Tensor3D = Tensor<Rank.R3>;\n/** @doclink Tensor */\nexport type Tensor4D = Tensor<Rank.R4>;\n/** @doclink Tensor */\nexport type Tensor5D = Tensor<Rank.R5>;\n/** @doclink Tensor */\nexport type Tensor6D = Tensor<Rank.R6>;\n\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable<R extends Rank = Rank> extends Tensor<R> {\n  name: string;\n\n  constructor(\n      initialValue: Tensor<R>, public trainable: boolean, name: string,\n      tensorId: number) {\n    super(\n        initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.name = name;\n  }\n\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  assign(newValue: Tensor<R>): void {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(\n          `dtype of the new value (${newValue.dtype}) and ` +\n          `previous value (${this.dtype}) must match`);\n    }\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(\n          `shape of the new value (${newValue.shape}) and ` +\n          `previous value (${this.shape}) must match`);\n    }\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null /* backend */);\n  }\n\n  dispose(): void {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n}\n\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: (instance: Variable) => {\n    return instance instanceof Tensor && instance.assign != null &&\n        instance.assign instanceof Function;\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}