{"ast":null,"code":"import _classCallCheck from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * Contains global resources of a model.\n */\nexport var ResourceManager = /*#__PURE__*/function () {\n  function ResourceManager() {\n    var hashTableNameToHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var hashTableMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ResourceManager);\n\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n\n\n  _createClass(ResourceManager, [{\n    key: \"addHashTable\",\n    value: function addHashTable(name, hashTable) {\n      this.hashTableNameToHandle[name] = hashTable.handle;\n      this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n\n  }, {\n    key: \"getHashTableHandleByName\",\n    value: function getHashTableHandleByName(name) {\n      return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n\n  }, {\n    key: \"getHashTableById\",\n    value: function getHashTableById(id) {\n      return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var key in this.hashTableMap) {\n        this.hashTableMap[key].clearAndClose();\n        delete this.hashTableMap[key];\n      }\n\n      for (var name in this.hashTableNameToHandle) {\n        this.hashTableNameToHandle[name].dispose();\n        delete this.hashTableNameToHandle[name];\n      }\n    }\n  }]);\n\n  return ResourceManager;\n}();","map":{"version":3,"sources":["../../src/executor/resource_manager.ts"],"names":[],"mappings":";;;AAmBA;;AAEG;AACH,WAAa,eAAb;AACE,6BAE4C;AAAA,QAD/B,qBAC+B,uEADS,EACT;AAAA,QAA/B,YAA+B,uEAAF,EAAE;;AAAA;;AAD/B,SAAA,qBAAA,GAAA,qBAAA;AACA,SAAA,YAAA,GAAA,YAAA;AAAmC;AAEhD;;;;;;;;AAQG;;;AAbL;AAAA;AAAA,WAcE,sBAAa,IAAb,EAA2B,SAA3B,EAA+C;AAC7C,WAAK,qBAAL,CAA2B,IAA3B,IAAmC,SAAS,CAAC,MAA7C;AACA,WAAK,YAAL,CAAkB,SAAS,CAAC,EAA5B,IAAkC,SAAlC;AACD;AAED;;;;AAIG;;AAvBL;AAAA;AAAA,WAwBE,kCAAyB,IAAzB,EAAqC;AACnC,aAAO,KAAK,qBAAL,CAA2B,IAA3B,CAAP;AACD;AAED;;;AAGG;;AA/BL;AAAA;AAAA,WAgCE,0BAAiB,EAAjB,EAA2B;AACzB,aAAO,KAAK,YAAL,CAAkB,EAAlB,CAAP;AACD;AAED;;AAEG;;AAtCL;AAAA;AAAA,WAuCE,mBAAO;AACL,WAAK,IAAM,GAAX,IAAkB,KAAK,YAAvB,EAAqC;AACnC,aAAK,YAAL,CAAkB,GAAlB,EAAuB,aAAvB;AACA,eAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;AACD;;AAED,WAAK,IAAM,IAAX,IAAmB,KAAK,qBAAxB,EAA+C;AAC7C,aAAK,qBAAL,CAA2B,IAA3B,EAAiC,OAAjC;AACA,eAAO,KAAK,qBAAL,CAA2B,IAA3B,CAAP;AACD;AACF;AAjDH;;AAAA;AAAA","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {HashTableMap, NamedTensorMap} from '../data/types';\nimport {HashTable} from './hash_table';\n\n/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(\n      readonly hashTableNameToHandle: NamedTensorMap = {},\n      readonly hashTableMap: HashTableMap = {}) {}\n\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name: string, hashTable: HashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name: string) {\n    return this.hashTableNameToHandle[name];\n  }\n\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id: number): HashTable {\n    return this.hashTableMap[id];\n  }\n\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}