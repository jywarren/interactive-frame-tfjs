{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  switch (node.op) {\n    case 'Fill':\n      {\n        var shape = getParamValue('shape', node, tensorMap, context);\n        var dtype = getParamValue('dtype', node, tensorMap, context);\n        var value = getParamValue('value', node, tensorMap, context);\n        return [tfOps.fill(shape, value, dtype)];\n      }\n\n    case 'LinSpace':\n      {\n        var start = getParamValue('start', node, tensorMap, context);\n        var stop = getParamValue('stop', node, tensorMap, context);\n        var num = getParamValue('num', node, tensorMap, context);\n        return [tfOps.linspace(start, stop, num)];\n      }\n\n    case 'Multinomial':\n      {\n        var logits = getParamValue('logits', node, tensorMap, context);\n        var numSamples = getParamValue('numSamples', node, tensorMap, context);\n        var seed = getParamValue('seed', node, tensorMap, context);\n        return [tfOps.multinomial(logits, numSamples, seed)];\n      }\n\n    case 'OneHot':\n      {\n        var indices = getParamValue('indices', node, tensorMap, context);\n        var depth = getParamValue('depth', node, tensorMap, context);\n        var onValue = getParamValue('onValue', node, tensorMap, context);\n        var offValue = getParamValue('offValue', node, tensorMap, context);\n        return [tfOps.oneHot(indices, depth, onValue, offValue)];\n      }\n\n    case 'Ones':\n      {\n        return [tfOps.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'OnesLike':\n      {\n        return [tfOps.onesLike(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'RandomUniform':\n      {\n        return [tfOps.randomUniform( // tslint:disable-next-line:no-any\n        getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'Range':\n      {\n        var _start = getParamValue('start', node, tensorMap, context);\n\n        var _stop = getParamValue('stop', node, tensorMap, context);\n\n        var step = getParamValue('step', node, tensorMap, context);\n        return [tfOps.range(_start, _stop, step, getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'TruncatedNormal':\n      {\n        var _shape = getParamValue('shape', node, tensorMap, context);\n\n        var mean = getParamValue('mean', node, tensorMap, context);\n        var stdDev = getParamValue('stdDev', node, tensorMap, context);\n\n        var _seed = getParamValue('seed', node, tensorMap, context);\n\n        return [tfOps.truncatedNormal(_shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), _seed)];\n      }\n\n    case 'Zeros':\n      {\n        return [tfOps.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'ZerosLike':\n      {\n        return [tfOps.zerosLike(getParamValue('x', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'creation';","map":{"version":3,"sources":["../../../src/operations/executors/creation_executor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n          return [tfOps.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [tfOps.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomUniform': {\n          return [tfOps.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [tfOps.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [tfOps.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [tfOps.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}