{"ast":null,"code":"import _toConsumableArray from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nvar DEFAULT_FILE_NAME_PREFIX = 'model';\nvar DEFAULT_JSON_EXTENSION_NAME = '.json';\nvar DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer(f) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve);\n  }).then(f);\n}\n\nexport var BrowserDownloads = /*#__PURE__*/function () {\n  function BrowserDownloads(fileNamePrefix) {\n    _classCallCheck(this, BrowserDownloads);\n\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  _createClass(BrowserDownloads, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(modelArtifacts) {\n        var weightsURL, weightsManifest, modelJSON, modelJsonURL, jsonAnchor, weightDataAnchor;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(typeof document === 'undefined')) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n\n              case 2:\n                weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n                  type: 'application/octet-stream'\n                }));\n\n                if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n\n              case 7:\n                weightsManifest = [{\n                  paths: ['./' + this.weightDataFileName],\n                  weights: modelArtifacts.weightSpecs\n                }];\n                modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n                modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], {\n                  type: 'application/json'\n                })); // If anchor elements are not provided, create them without attaching them\n                // to parents, so that the downloaded file names can be controlled.\n\n                jsonAnchor = this.modelJsonAnchor == null ? document.createElement('a') : this.modelJsonAnchor;\n                jsonAnchor.download = this.modelJsonFileName;\n                jsonAnchor.href = modelJsonURL; // Trigger downloads by evoking a click event on the download anchors.\n                // When multiple downloads are started synchronously, Firefox will only\n                // save the last one.\n\n                _context.next = 15;\n                return defer(function () {\n                  return jsonAnchor.dispatchEvent(new MouseEvent('click'));\n                });\n\n              case 15:\n                if (!(modelArtifacts.weightData != null)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                _context.next = 21;\n                return defer(function () {\n                  return weightDataAnchor.dispatchEvent(new MouseEvent('click'));\n                });\n\n              case 21:\n                return _context.abrupt(\"return\", {\n                  modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n                });\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }]);\n\n  return BrowserDownloads;\n}();\nBrowserDownloads.URL_SCHEME = 'downloads://';\n\nvar BrowserFiles = /*#__PURE__*/function () {\n  function BrowserFiles(files) {\n    _classCallCheck(this, BrowserFiles);\n\n    if (files == null || files.length < 1) {\n      throw new Error(\"When calling browserFiles, at least 1 file is required, \" + \"but received \".concat(files));\n    }\n\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n\n  _createClass(BrowserFiles, [{\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var jsonReader = new FileReader();\n\n                  jsonReader.onload = function (event) {\n                    // tslint:disable-next-line:no-any\n                    var modelJSON = JSON.parse(event.target.result);\n                    var modelTopology = modelJSON.modelTopology;\n\n                    if (modelTopology == null) {\n                      reject(new Error(\"modelTopology field is missing from file \".concat(_this.jsonFile.name)));\n                      return;\n                    }\n\n                    var weightsManifest = modelJSON.weightsManifest;\n\n                    if (weightsManifest == null) {\n                      reject(new Error(\"weightManifest field is missing from file \".concat(_this.jsonFile.name)));\n                      return;\n                    }\n\n                    if (_this.weightsFiles.length === 0) {\n                      resolve({\n                        modelTopology: modelTopology\n                      });\n                      return;\n                    }\n\n                    var modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, function (weightsManifest) {\n                      return _this.loadWeights(weightsManifest);\n                    });\n                    resolve(modelArtifactsPromise);\n                  };\n\n                  jsonReader.onerror = function (error) {\n                    return reject(\"Failed to read model topology and weights manifest JSON \" + \"from file '\".concat(_this.jsonFile.name, \"'. BrowserFiles supports loading \") + \"Keras-style tf.Model artifacts only.\");\n                  };\n\n                  jsonReader.readAsText(_this.jsonFile);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"loadWeights\",\n    value: function loadWeights(weightsManifest) {\n      var _this2 = this;\n\n      var weightSpecs = [];\n      var paths = [];\n\n      var _iterator = _createForOfIteratorHelper(weightsManifest),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var entry = _step.value;\n          weightSpecs.push.apply(weightSpecs, _toConsumableArray(entry.weights));\n          paths.push.apply(paths, _toConsumableArray(entry.paths));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n      var promises = paths.map(function (path) {\n        return _this2.loadWeightsFile(path, pathToFile[path]);\n      });\n      return Promise.all(promises).then(function (buffers) {\n        return [weightSpecs, concatenateArrayBuffers(buffers)];\n      });\n    }\n  }, {\n    key: \"loadWeightsFile\",\n    value: function loadWeightsFile(path, file) {\n      return new Promise(function (resolve, reject) {\n        var weightFileReader = new FileReader();\n\n        weightFileReader.onload = function (event) {\n          // tslint:disable-next-line:no-any\n          var weightData = event.target.result;\n          resolve(weightData);\n        };\n\n        weightFileReader.onerror = function (error) {\n          return reject(\"Failed to weights data from file of path '\".concat(path, \"'.\"));\n        };\n\n        weightFileReader.readAsArrayBuffer(file);\n      });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n\n  }, {\n    key: \"checkManifestAndWeightFiles\",\n    value: function checkManifestAndWeightFiles(manifest) {\n      var _this3 = this;\n\n      var basenames = [];\n      var fileNames = this.weightsFiles.map(function (file) {\n        return basename(file.name);\n      });\n      var pathToFile = {};\n\n      var _iterator2 = _createForOfIteratorHelper(manifest),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var group = _step2.value;\n          group.paths.forEach(function (path) {\n            var pathBasename = basename(path);\n\n            if (basenames.indexOf(pathBasename) !== -1) {\n              throw new Error(\"Duplicate file basename found in weights manifest: \" + \"'\".concat(pathBasename, \"'\"));\n            }\n\n            basenames.push(pathBasename);\n\n            if (fileNames.indexOf(pathBasename) === -1) {\n              throw new Error(\"Weight file with basename '\".concat(pathBasename, \"' is not provided.\"));\n            } else {\n              pathToFile[path] = _this3.weightsFiles[fileNames.indexOf(pathBasename)];\n            }\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (basenames.length !== this.weightsFiles.length) {\n        throw new Error(\"Mismatch in the number of files in weights manifest \" + \"(\".concat(basenames.length, \") and the number of weight files provided \") + \"(\".concat(this.weightsFiles.length, \").\"));\n      }\n\n      return pathToFile;\n    }\n  }]);\n\n  return BrowserFiles;\n}();\n\nexport var browserDownloadsRouter = function browserDownloadsRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserDownloads() {\n  var fileNamePrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'model';\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"sources":["../../src/io/browser_files.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelJsonFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly modelJsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [modelArtifacts.weightData], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelJSON: ModelJSON =\n          getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n      const modelJsonURL = window.URL.createObjectURL(\n          new Blob([JSON.stringify(modelJSON)], {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.modelJsonAnchor == null ?\n          document.createElement('a') :\n          this.modelJsonAnchor;\n      jsonAnchor.download = this.modelJsonFileName;\n      jsonAnchor.href = modelJsonURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly jsonFile: File;\n  private readonly weightsFiles: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        if (this.weightsFiles.length === 0) {\n          resolve({modelTopology});\n          return;\n        }\n\n        const modelArtifactsPromise = getModelArtifactsForJSON(\n            modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n        resolve(modelArtifactsPromise);\n      };\n\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(this.jsonFile);\n    });\n  }\n\n  private loadWeights(weightsManifest: WeightsManifestConfig): Promise<[\n    /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n  ]> {\n    const weightSpecs: WeightsManifestEntry[] = [];\n    const paths: string[] = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n\n    const pathToFile: {[path: string]: File} =\n        this.checkManifestAndWeightFiles(weightsManifest);\n\n    const promises: Array<Promise<ArrayBuffer>> =\n        paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n\n    return Promise.all(promises).then(\n        buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n  }\n\n  private loadWeightsFile(path: string, file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n      weightFileReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const weightData = (event.target as any).result as ArrayBuffer;\n        resolve(weightData);\n      };\n      weightFileReader.onerror = error =>\n          reject(`Failed to weights data from file of path '${path}'.`);\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(manifest: WeightsManifestConfig):\n      {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = this.weightsFiles.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${this.weightsFiles.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}