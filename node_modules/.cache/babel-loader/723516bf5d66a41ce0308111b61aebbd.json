{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nvar ARROW = '->';\nvar ARROW_REGEX = /->/g;\nvar COMMA = ',';\nvar ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\n\nexport function decodeEinsumEquation(equation, numTensors) {\n  equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n\n  var numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) / ARROW.length;\n\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(\"Equation must contain exactly one arrow (\\\"\".concat(ARROW, \"\\\").\"));\n  }\n\n  var _equation$split = equation.split(ARROW),\n      _equation$split2 = _slicedToArray(_equation$split, 2),\n      inputString = _equation$split2[0],\n      outputString = _equation$split2[1];\n\n  assert(inputString.indexOf(ELLIPSIS) === -1, function () {\n    return \"The ellipsis notation (\\\"\".concat(ELLIPSIS, \"\\\") is not supported yet.\");\n  });\n  var inputTerms = inputString.split(COMMA);\n  var numInputs = inputTerms.length;\n\n  if (numTensors !== numInputs) {\n    throw new Error(\"Expected \".concat(numInputs, \" input tensors, received \").concat(numTensors));\n  }\n\n  if (numInputs > 2) {\n    throw new Error('Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  var allDims = [];\n\n  var _loop = function _loop(i) {\n    var dimName = outputString[i];\n\n    if (!inputTerms.some(function (inputTerm) {\n      return inputTerm.indexOf(dimName) !== -1;\n    })) {\n      throw new Error(\"Output subscripts contain the label \".concat(dimName, \" \") + \"not present in the input subscripts.\");\n    }\n\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  };\n\n  for (var i = 0; i < outputString.length; ++i) {\n    _loop(i);\n  }\n\n  for (var _i = 0; _i < inputString.length; ++_i) {\n    var dimName = inputString[_i];\n\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  var idDims = new Array(inputTerms.length);\n\n  for (var _i2 = 0; _i2 < numInputs; ++_i2) {\n    if (new Set(inputTerms[_i2].split('')).size !== inputTerms[_i2].length) {\n      throw new Error(\"Found duplicate axes in input component \".concat(inputTerms[_i2], \". \") + \"Support for duplicate axes in input is not implemented yet.\");\n    }\n\n    idDims[_i2] = [];\n\n    for (var j = 0; j < inputTerms[_i2].length; ++j) {\n      idDims[_i2].push(allDims.indexOf(inputTerms[_i2][j]));\n    }\n  }\n\n  var numDims = allDims.length; // Number of unique dimensions.\n\n  var numOutDims = outputString.length; // Number of output dimensions.\n\n  var summedDims = []; // Dimensions being summed over.\n\n  for (var _i3 = numOutDims; _i3 < numDims; ++_i3) {\n    summedDims.push(_i3);\n  }\n\n  return {\n    allDims: allDims,\n    summedDims: summedDims,\n    idDims: idDims\n  };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\n\nexport function getEinsumPermutation(nDims, idDims) {\n  var permutationIndices = new Array(nDims);\n  permutationIndices.fill(-1);\n\n  for (var i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n\n  var expandDims = [];\n\n  for (var _i4 = 0; _i4 < nDims; ++_i4) {\n    if (permutationIndices[_i4] === -1) {\n      expandDims.push(_i4);\n    }\n  }\n\n  permutationIndices = permutationIndices.filter(function (d) {\n    return d !== -1;\n  });\n  return {\n    permutationIndices: permutationIndices,\n    expandDims: expandDims\n  };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\n\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n  var dimSizes = new Array(nDims);\n\n  var _loop2 = function _loop2(i) {\n    var shape = tensors[i].shape;\n\n    var _loop3 = function _loop3(j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(dimSizes[idDims[i][j]] === shape[j], function () {\n          return \"Expected dimension \".concat(dimSizes[idDims[i][j]], \" at axis \").concat(j, \" \") + \"of input shaped \".concat(JSON.stringify(shape), \", \") + \"but got dimension \".concat(shape[j]);\n        });\n      }\n    };\n\n    for (var j = 0; j < idDims[i].length; ++j) {\n      _loop3(j);\n    }\n  };\n\n  for (var i = 0; i < tensors.length; ++i) {\n    _loop2(i);\n  }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\n\nexport function getEinsumComputePath(summedDims, idDims) {\n  var path = summedDims;\n  var steps = [];\n  var nSteps = 0;\n\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n\n  nSteps = summedDims.length + 1;\n\n  for (var i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n\n  var computedTermIndices = [];\n\n  for (var _i5 = 0; _i5 < path.length; ++_i5) {\n    var summedDim = path[_i5];\n    var termIndices = findTermsWithDim(idDims, summedDim);\n\n    var _iterator = _createForOfIteratorHelper(termIndices),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var termIndex = _step.value;\n\n        if (computedTermIndices.indexOf(termIndex) === -1) {\n          steps[_i5].push(termIndex);\n\n          computedTermIndices.push(termIndex);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return {\n    path: path,\n    steps: steps\n  };\n}\n/** Determines if an axes permutation is the identity permutation. */\n\nexport function isIdentityPermutation(perm) {\n  return perm.every(function (dim, index) {\n    return dim === index;\n  });\n}\n\nfunction findTermsWithDim(idDims, dim) {\n  var termIndices = [];\n\n  for (var i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n\n  return termIndices;\n}","map":{"version":3,"sources":["../../src/backends/einsum_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Utility functions for computing einsum (tensor contraction and summation\n * based on Einstein summation.)\n */\n\nimport {Tensor} from '../tensor';\nimport {assert} from '../util_base';\n\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation: string, numTensors: number): {\n  allDims: string[],\n  summedDims: number[],\n  idDims: number[][],\n} {\n  equation = equation.replace(/\\s/g, '');  // Remove witespace in equation.\n  const numArrows =\n      (equation.length - equation.replace(ARROW_REGEX, '').length) /\n      ARROW.length;\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(\n      inputString.indexOf(ELLIPSIS) === -1,\n      () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(\n        `Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n  if (numInputs > 2) {\n    throw new Error(\n        'Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims: string[] = [];\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(\n          `Output subscripts contain the label ${dimName} ` +\n          `not present in the input subscripts.`);\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims: number[][] = new Array<number[]>(inputTerms.length);\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(\n          `Found duplicate axes in input component ${inputTerms[i]}. ` +\n          `Support for duplicate axes in input is not implemented yet.`);\n    }\n    idDims[i] = [];\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length;          // Number of unique dimensions.\n  const numOutDims = outputString.length;  // Number of output dimensions.\n  const summedDims: number[] = [];         // Dimensions being summed over.\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n  return {allDims, summedDims, idDims};\n}\n\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims: number, idDims: number[]):\n    {permutationIndices: number[], expandDims: number[]} {\n  let permutationIndices: number[] = new Array<number>(nDims);\n  permutationIndices.fill(-1);\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  const expandDims: number[] = [];\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {permutationIndices, expandDims};\n}\n\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(\n    nDims: number, idDims: number[][], tensors: Tensor[]) {\n  const dimSizes: number[] = new Array<number>(nDims);\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape: number[] = tensors[i].shape;\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(\n            dimSizes[idDims[i][j]] === shape[j],\n            () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                `of input shaped ${JSON.stringify(shape)}, ` +\n                `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims: number[], idDims: number[][]):\n    {path: number[], steps: number[][]} {\n  const path: number[] = summedDims;\n  const steps: number[][] = [];\n  let nSteps = 0;\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  const computedTermIndices: number[] = [];\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n  return {path, steps};\n}\n\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm: number[]): boolean {\n  return perm.every((dim: number, index: number) => dim === index);\n}\n\nfunction findTermsWithDim(idDims: number[][], dim: number): number[] {\n  const termIndices: number[] = [];\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}