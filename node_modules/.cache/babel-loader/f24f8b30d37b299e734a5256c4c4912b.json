{"ast":null,"code":"import _regeneratorRuntime from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/warren/sites/interactive-frame-tfjs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport * as THREE from \"./utils/three.module\";\nimport { CameraUtils } from \"./utils/CameraUtils\";\nimport { OrbitControls } from \"./OrbitControls\";\nimport \"@mediapipe/pose\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\"; //import { FBXLoader } from \"./utils/FBXLoader\";\n\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n/*\nCredit for 3d model: \"Palm Plant\" (https://skfb.ly/6VsxQ) by SomeKevin is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).\n*/\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar HOST = process.env.NODE_ENV === \"development\" ? \"http://localhost:3000\" : \"https://interactive-frame.netlify.app\";\nvar camera, scene, renderer;\nvar cameraControls;\nvar bottomLeftCorner, bottomRightCorner, topLeftCorner;\nvar detector;\nvar plant;\nvar defaultVideoWidth = 640;\n/* Detect if device is a touch screen or not */\n\nvar touchscreen = \"ontouchstart\" in window ? true : false;\n\nvar setupCamera = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var video, stream;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error(\"Browser API navigator.mediaDevices.getUserMedia not available\");\n\n          case 2:\n            video = document.getElementById(\"video\");\n            _context.next = 5;\n            return navigator.mediaDevices.getUserMedia({\n              audio: false,\n              video: {\n                facingMode: \"user\"\n              }\n            });\n\n          case 5:\n            stream = _context.sent;\n            video.srcObject = stream;\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              return video.onloadedmetadata = function () {\n                return resolve(video);\n              };\n            }));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function setupCamera() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar setup = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var video;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return poseDetection.createDetector(poseDetection.SupportedModels.MoveNet);\n\n          case 2:\n            detector = _context2.sent;\n            _context2.next = 5;\n            return setupCamera();\n\n          case 5:\n            video = _context2.sent;\n            video.play();\n            return _context2.abrupt(\"return\", video);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function setup() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction init() {\n  return _init.apply(this, arguments);\n}\n\nfunction _init() {\n  _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var container, planeGeo, texture, planeTop, planeBottom, planeFront, planeBack, planeRight, planeLeft, loader, mainLight, color, intensity, directionalLight, Dlight, light;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            container = document.getElementById(\"container\"); // renderer\n\n            renderer = new THREE.WebGLRenderer({\n              antialias: true\n            });\n            renderer.setPixelRatio(window.devicePixelRatio);\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            container.appendChild(renderer.domElement);\n            renderer.shadowMap.enabled = true;\n            renderer.shadowMapSoft = true; // scene\n\n            scene = new THREE.Scene(); // camera\n\n            planeGeo = new THREE.PlaneGeometry(100.1, 100.1);\n            camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 5000);\n            camera.position.set(0, 50, 100);\n            scene.add(camera);\n            cameraControls = new OrbitControls(camera, renderer.domElement);\n            cameraControls.target.set(0, 40, 0);\n            cameraControls.maxDistance = 400;\n            cameraControls.minDistance = 10;\n            cameraControls.dispose();\n            cameraControls.update();\n            bottomLeftCorner = new THREE.Vector3();\n            bottomRightCorner = new THREE.Vector3();\n            topLeftCorner = new THREE.Vector3();\n\n            if (touchscreen) {\n              bottomRightCorner.set(50.0, -0.0, -20.0);\n              bottomLeftCorner.set(-50.0, -0.0, -20.0);\n              topLeftCorner.set(-50.0, 100.0, -20.0);\n            } else {\n              bottomRightCorner.set(50.0, -0.0, -30.0);\n              bottomLeftCorner.set(-50.0, -0.0, -30.0);\n              topLeftCorner.set(-50.0, 100.0, -30.0);\n            } // texture for frame\n\n\n            texture = new THREE.TextureLoader().load(\"\".concat(HOST, \"/white-wall-texture.jpeg\"));\n            texture.wrapS = THREE.RepeatWrapping;\n            texture.wrapT = THREE.RepeatWrapping; // walls\n\n            planeTop = new THREE.Mesh(planeGeo, new THREE.MeshPhongMaterial({\n              color: 0xffffff,\n              map: texture\n            }));\n            planeTop.position.y = 100;\n            planeTop.rotateX(Math.PI / 2);\n            planeTop.receiveShadow = true;\n            scene.add(planeTop);\n            planeBottom = new THREE.Mesh(planeGeo, new THREE.MeshPhongMaterial({\n              color: 0xffffff,\n              map: texture\n            }));\n            planeBottom.rotateX(-Math.PI / 2);\n            planeBottom.receiveShadow = true;\n            scene.add(planeBottom);\n            planeFront = new THREE.Mesh(planeGeo, new THREE.MeshPhongMaterial({\n              color: 0xffffff,\n              map: texture\n            }));\n            planeFront.position.z = 50;\n            planeFront.position.y = 50;\n            planeFront.rotateY(Math.PI);\n            planeFront.receiveShadow = true;\n            scene.add(planeFront);\n            planeBack = new THREE.Mesh(planeGeo, new THREE.MeshPhongMaterial({\n              color: 0xffffff,\n              map: texture\n            }));\n            planeBack.position.z = -50;\n            planeBack.position.y = 50;\n            planeBack.receiveShadow = true;\n            scene.add(planeBack);\n            planeRight = new THREE.Mesh(planeGeo, new THREE.MeshPhongMaterial({\n              color: 0xffffff,\n              map: texture\n            }));\n            planeRight.position.x = 50;\n            planeRight.position.y = 50;\n            planeRight.receiveShadow = true;\n            planeRight.rotateY(-Math.PI / 2);\n            scene.add(planeRight);\n            planeLeft = new THREE.Mesh(planeGeo, new THREE.MeshPhongMaterial({\n              color: 0xffffff,\n              map: texture\n            }));\n            planeLeft.position.x = -50;\n            planeLeft.position.y = 50;\n            planeLeft.receiveShadow = true;\n            planeLeft.rotateY(Math.PI / 2);\n            scene.add(planeLeft);\n            /* 3D model */\n            // example: https://sbcode.net/threejs/loaders-gltf/\n\n            loader = new GLTFLoader();\n            loader.load(\"\".concat(HOST, \"/chinatown.glb\"), // https://alitasci.net/gltf-to-glb-packer/\n            //    `${HOST}/chinatown/scene.gtlf`,\n            //    `${HOST}/palm-plant/source/Pflanze.fbx`,\n            function (object) {\n              plant = object;\n              /*\n                    plant.traverse(function (child) {\n                      if (child.isMesh) {\n                        child.castShadow = true;\n                        child.receiveShadow = false;\n              \n                        const texture = new THREE.TextureLoader().load(\n                          `${HOST}/palm-plant/textures/Pflanze_Albedo.png`\n                        );\n              \n                        child.material.map = texture;\n                        child.material.needsUpdate = true;\n                      }\n                    });\n              */\n\n              plant.castShadow = true;\n              plant.receiveShadow = false;\n\n              if (touchscreen) {\n                plant.scale.set(0.4, 0.4, 0.35);\n              } else {\n                plant.scale.set(0.22, 0.35, 0.22);\n              }\n\n              if (touchscreen) {\n                plant.position.set(0, 0, -30);\n              } else {\n                plant.position.set(0, 0, -40);\n              }\n\n              scene.add(plant);\n            }, undefined, function (e) {\n              console.error(e);\n            }); // lights\n\n            mainLight = new THREE.PointLight(0xffffff, 1, 250);\n            mainLight.position.y = 50;\n            mainLight.position.z = 10; // scene.add(mainLight);\n\n            color = 0xffffff; // const color = 0xdfebff;\n            // const intensity = 1;\n\n            intensity = 1;\n            directionalLight = new THREE.DirectionalLight(color, intensity);\n            directionalLight.position.set(0, 60, 0); // directionalLight.position.set(100, 100, 50);\n\n            directionalLight.castShadow = true; // directionalLight.target.position.set(0, 20, -40);\n            // scene.add(directionalLight);\n            // scene.add(directionalLight.target);\n\n            Dlight = new THREE.DirectionalLight(0x404040, 1);\n            Dlight.position.set(100, 120, 300);\n            Dlight.castShadow = true;\n            Dlight.shadow.camera.top = 200;\n            Dlight.shadow.camera.bottom = -200;\n            Dlight.shadow.camera.right = 200;\n            Dlight.shadow.camera.left = -200;\n            Dlight.shadow.mapSize.set(4096, 4096);\n            scene.add(Dlight);\n            light = new THREE.AmbientLight(0xffffff, 0.8); // soft white light\n\n            light.position.set(0, 0, 300);\n            scene.add(light);\n            window.addEventListener(\"resize\", onWindowResize);\n            document.addEventListener(\"mousemove\", onDocumentMouseMove, false);\n\n          case 81:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _init.apply(this, arguments);\n}\n\nfunction onDocumentMouseMove(event) {\n  // Manually fire the event in OrbitControls\n  cameraControls.handleMouseMoveRotate(event);\n}\n\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\nfunction onFaceMove(faceX, leftEyeYPosition) {\n  // Manually fire the event in OrbitControls\n  cameraControls.handleFaceMoveRotate(faceX, leftEyeYPosition);\n}\n\nfunction scaleValue(value, from, to) {\n  var scale = (to[1] - to[0]) / (from[1] - from[0]);\n  var capped = Math.min(from[1], Math.max(from[0], value)) - from[0];\n  return ~~(capped * scale + to[0]);\n}\n\nfunction getFaceCoordinates(poses) {\n  var _poses$, _poses$2;\n\n  var leftEye = (_poses$ = poses[0]) === null || _poses$ === void 0 ? void 0 : _poses$.keypoints.filter(function (keypoint) {\n    return keypoint.name === \"left_eye\";\n  })[0];\n  var rightEye = (_poses$2 = poses[0]) === null || _poses$2 === void 0 ? void 0 : _poses$2.keypoints.filter(function (keypoint) {\n    return keypoint.name === \"right_eye\";\n  })[0];\n  /* \n    The coordinates for the eyes will be based on the default size of the video element (640x480).\n    We need to do some calculation to make it match the window size instead\n  */\n\n  if (leftEye.score > 0.7) {\n    var scaledLeftEyeXCoordinate = scaleValue(leftEye.x, [0, defaultVideoWidth], [0, window.innerWidth]);\n    var scaledRightEyeXCoordinate = scaleValue(rightEye.x, [0, defaultVideoWidth], [0, window.innerWidth]);\n    var leftEyePosition = window.innerWidth - scaledLeftEyeXCoordinate; // const rightEyePosition = window.innerWidth - scaledRightEyeXCoordinate;\n\n    var leftEyeYPosition = leftEye.y; // const middleEyes = leftEyePosition - rightEyePosition / 2;\n    // onFaceMove(middleEyes, leftEyeYPosition);\n\n    onFaceMove(leftEyePosition, leftEyeYPosition);\n  }\n}\n\nfunction animate() {\n  return _animate.apply(this, arguments);\n}\n\nfunction _animate() {\n  _animate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var _detector;\n\n    var poses;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            requestAnimationFrame(animate);\n            _context5.next = 3;\n            return (_detector = detector) === null || _detector === void 0 ? void 0 : _detector.estimatePoses(video);\n\n          case 3:\n            poses = _context5.sent;\n            getFaceCoordinates(poses); // set the projection matrix to encompass the portal's frame\n\n            CameraUtils.frameCorners(camera, bottomLeftCorner, bottomRightCorner, topLeftCorner, false);\n            renderer.render(scene, camera);\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _animate.apply(this, arguments);\n}\n\nvar App = function App() {\n  _s();\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            init();\n            _context3.next = 3;\n            return setup();\n\n          case 3:\n            animate();\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/warren/sites/interactive-frame-tfjs/src/App.js"],"names":["React","useEffect","THREE","CameraUtils","OrbitControls","poseDetection","GLTFLoader","HOST","process","env","NODE_ENV","camera","scene","renderer","cameraControls","bottomLeftCorner","bottomRightCorner","topLeftCorner","detector","plant","defaultVideoWidth","touchscreen","window","setupCamera","navigator","mediaDevices","getUserMedia","Error","video","document","getElementById","audio","facingMode","stream","srcObject","Promise","resolve","onloadedmetadata","setup","createDetector","SupportedModels","MoveNet","play","init","container","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","shadowMap","enabled","shadowMapSoft","Scene","planeGeo","PlaneGeometry","PerspectiveCamera","position","set","add","target","maxDistance","minDistance","dispose","update","Vector3","texture","TextureLoader","load","wrapS","RepeatWrapping","wrapT","planeTop","Mesh","MeshPhongMaterial","color","map","y","rotateX","Math","PI","receiveShadow","planeBottom","planeFront","z","rotateY","planeBack","planeRight","x","planeLeft","loader","object","castShadow","scale","undefined","e","console","error","mainLight","PointLight","intensity","directionalLight","DirectionalLight","Dlight","shadow","top","bottom","right","left","mapSize","light","AmbientLight","addEventListener","onWindowResize","onDocumentMouseMove","event","handleMouseMoveRotate","aspect","onFaceMove","faceX","leftEyeYPosition","handleFaceMoveRotate","scaleValue","value","from","to","capped","min","max","getFaceCoordinates","poses","leftEye","keypoints","filter","keypoint","name","rightEye","score","scaledLeftEyeXCoordinate","scaledRightEyeXCoordinate","leftEyePosition","animate","requestAnimationFrame","estimatePoses","frameCorners","render","App"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport * as THREE from \"./utils/three.module\";\nimport { CameraUtils } from \"./utils/CameraUtils\";\nimport { OrbitControls } from \"./OrbitControls\";\nimport \"@mediapipe/pose\";\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\n//import { FBXLoader } from \"./utils/FBXLoader\";\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\n/*\nCredit for 3d model: \"Palm Plant\" (https://skfb.ly/6VsxQ) by SomeKevin is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).\n*/\n\nconst HOST =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:3000\"\n    : \"https://interactive-frame.netlify.app\";\n\nlet camera, scene, renderer;\nlet cameraControls;\nlet bottomLeftCorner, bottomRightCorner, topLeftCorner;\nlet detector;\n\nlet plant;\nlet defaultVideoWidth = 640;\n\n/* Detect if device is a touch screen or not */\nlet touchscreen = \"ontouchstart\" in window ? true : false;\n\nconst setupCamera = async () => {\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    throw new Error(\n      \"Browser API navigator.mediaDevices.getUserMedia not available\"\n    );\n  }\n\n  const video = document.getElementById(\"video\");\n\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: false,\n    video: {\n      facingMode: \"user\",\n    },\n  });\n  video.srcObject = stream;\n\n  return new Promise(\n    (resolve) => (video.onloadedmetadata = () => resolve(video))\n  );\n};\n\nconst setup = async () => {\n  detector = await poseDetection.createDetector(\n    poseDetection.SupportedModels.MoveNet\n  );\n  const video = await setupCamera();\n  video.play();\n  return video;\n};\n\nasync function init() {\n  const container = document.getElementById(\"container\");\n\n  // renderer\n  renderer = new THREE.WebGLRenderer({ antialias: true });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  container.appendChild(renderer.domElement);\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMapSoft = true;\n\n  // scene\n  scene = new THREE.Scene();\n\n  // camera\n  const planeGeo = new THREE.PlaneGeometry(100.1, 100.1);\n\n  camera = new THREE.PerspectiveCamera(\n    45,\n    window.innerWidth / window.innerHeight,\n    1,\n    5000\n  );\n  camera.position.set(0, 50, 100);\n  scene.add(camera);\n\n  cameraControls = new OrbitControls(camera, renderer.domElement);\n  cameraControls.target.set(0, 40, 0);\n  cameraControls.maxDistance = 400;\n  cameraControls.minDistance = 10;\n  cameraControls.dispose();\n  cameraControls.update();\n\n  bottomLeftCorner = new THREE.Vector3();\n  bottomRightCorner = new THREE.Vector3();\n  topLeftCorner = new THREE.Vector3();\n\n  if (touchscreen) {\n    bottomRightCorner.set(50.0, -0.0, -20.0);\n    bottomLeftCorner.set(-50.0, -0.0, -20.0);\n    topLeftCorner.set(-50.0, 100.0, -20.0);\n  } else {\n    bottomRightCorner.set(50.0, -0.0, -30.0);\n    bottomLeftCorner.set(-50.0, -0.0, -30.0);\n    topLeftCorner.set(-50.0, 100.0, -30.0);\n  }\n\n  // texture for frame\n  const texture = new THREE.TextureLoader().load(\n    `${HOST}/white-wall-texture.jpeg`\n  );\n  texture.wrapS = THREE.RepeatWrapping;\n  texture.wrapT = THREE.RepeatWrapping;\n\n  // walls\n  const planeTop = new THREE.Mesh(\n    planeGeo,\n    new THREE.MeshPhongMaterial({ color: 0xffffff, map: texture })\n  );\n  planeTop.position.y = 100;\n  planeTop.rotateX(Math.PI / 2);\n  planeTop.receiveShadow = true;\n  scene.add(planeTop);\n\n  const planeBottom = new THREE.Mesh(\n    planeGeo,\n    new THREE.MeshPhongMaterial({ color: 0xffffff, map: texture })\n  );\n  planeBottom.rotateX(-Math.PI / 2);\n  planeBottom.receiveShadow = true;\n  scene.add(planeBottom);\n\n  const planeFront = new THREE.Mesh(\n    planeGeo,\n    new THREE.MeshPhongMaterial({ color: 0xffffff, map: texture })\n  );\n  planeFront.position.z = 50;\n  planeFront.position.y = 50;\n  planeFront.rotateY(Math.PI);\n  planeFront.receiveShadow = true;\n  scene.add(planeFront);\n\n  const planeBack = new THREE.Mesh(\n    planeGeo,\n    new THREE.MeshPhongMaterial({ color: 0xffffff, map: texture })\n  );\n  planeBack.position.z = -50;\n  planeBack.position.y = 50;\n  planeBack.receiveShadow = true;\n  scene.add(planeBack);\n\n  const planeRight = new THREE.Mesh(\n    planeGeo,\n    new THREE.MeshPhongMaterial({ color: 0xffffff, map: texture })\n  );\n  planeRight.position.x = 50;\n  planeRight.position.y = 50;\n  planeRight.receiveShadow = true;\n  planeRight.rotateY(-Math.PI / 2);\n  scene.add(planeRight);\n\n  const planeLeft = new THREE.Mesh(\n    planeGeo,\n    new THREE.MeshPhongMaterial({ color: 0xffffff, map: texture })\n  );\n  planeLeft.position.x = -50;\n  planeLeft.position.y = 50;\n  planeLeft.receiveShadow = true;\n  planeLeft.rotateY(Math.PI / 2);\n  scene.add(planeLeft);\n\n  /* 3D model */\n  // example: https://sbcode.net/threejs/loaders-gltf/\n  const loader = new GLTFLoader();\n  loader.load(\n    `${HOST}/chinatown.glb`, // https://alitasci.net/gltf-to-glb-packer/\n//    `${HOST}/chinatown/scene.gtlf`,\n//    `${HOST}/palm-plant/source/Pflanze.fbx`,\n    function (object) {\n      plant = object;\n/*\n      plant.traverse(function (child) {\n        if (child.isMesh) {\n          child.castShadow = true;\n          child.receiveShadow = false;\n\n          const texture = new THREE.TextureLoader().load(\n            `${HOST}/palm-plant/textures/Pflanze_Albedo.png`\n          );\n\n          child.material.map = texture;\n          child.material.needsUpdate = true;\n        }\n      });\n*/\n\n      plant.castShadow = true;\n      plant.receiveShadow = false;\n      if (touchscreen) {\n        plant.scale.set(0.4, 0.4, 0.35);\n      } else {\n        plant.scale.set(0.22, 0.35, 0.22);\n      }\n\n      if (touchscreen) {\n        plant.position.set(0, 0, -30);\n      } else {\n        plant.position.set(0, 0, -40);\n      }\n\n      scene.add(plant);\n    },\n    undefined,\n    function (e) {\n      console.error(e);\n    }\n  );\n\n  // lights\n  const mainLight = new THREE.PointLight(0xffffff, 1, 250);\n  mainLight.position.y = 50;\n  mainLight.position.z = 10;\n  // scene.add(mainLight);\n\n  const color = 0xffffff;\n  // const color = 0xdfebff;\n  // const intensity = 1;\n  const intensity = 1;\n  const directionalLight = new THREE.DirectionalLight(color, intensity);\n  directionalLight.position.set(0, 60, 0);\n  // directionalLight.position.set(100, 100, 50);\n  directionalLight.castShadow = true;\n  // directionalLight.target.position.set(0, 20, -40);\n  // scene.add(directionalLight);\n  // scene.add(directionalLight.target);\n\n  const Dlight = new THREE.DirectionalLight(0x404040, 1);\n  Dlight.position.set(100, 120, 300);\n  Dlight.castShadow = true;\n  Dlight.shadow.camera.top = 200;\n  Dlight.shadow.camera.bottom = -200;\n  Dlight.shadow.camera.right = 200;\n  Dlight.shadow.camera.left = -200;\n  Dlight.shadow.mapSize.set(4096, 4096);\n  scene.add(Dlight);\n\n  const light = new THREE.AmbientLight(0xffffff, 0.8); // soft white light\n  light.position.set(0, 0, 300);\n  scene.add(light);\n\n  window.addEventListener(\"resize\", onWindowResize);\n  document.addEventListener(\"mousemove\", onDocumentMouseMove, false);\n}\n\nfunction onDocumentMouseMove(event) {\n  // Manually fire the event in OrbitControls\n  cameraControls.handleMouseMoveRotate(event);\n}\n\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\nfunction onFaceMove(faceX, leftEyeYPosition) {\n  // Manually fire the event in OrbitControls\n  cameraControls.handleFaceMoveRotate(faceX, leftEyeYPosition);\n}\n\nfunction scaleValue(value, from, to) {\n  var scale = (to[1] - to[0]) / (from[1] - from[0]);\n  var capped = Math.min(from[1], Math.max(from[0], value)) - from[0];\n\n  return ~~(capped * scale + to[0]);\n}\n\nfunction getFaceCoordinates(poses) {\n  const leftEye = poses[0]?.keypoints.filter(\n    (keypoint) => keypoint.name === \"left_eye\"\n  )[0];\n  const rightEye = poses[0]?.keypoints.filter(\n    (keypoint) => keypoint.name === \"right_eye\"\n  )[0];\n\n  /* \n    The coordinates for the eyes will be based on the default size of the video element (640x480).\n    We need to do some calculation to make it match the window size instead\n  */\n\n  if (leftEye.score > 0.7) {\n    let scaledLeftEyeXCoordinate = scaleValue(\n      leftEye.x,\n      [0, defaultVideoWidth],\n      [0, window.innerWidth]\n    );\n\n    let scaledRightEyeXCoordinate = scaleValue(\n      rightEye.x,\n      [0, defaultVideoWidth],\n      [0, window.innerWidth]\n    );\n\n    const leftEyePosition = window.innerWidth - scaledLeftEyeXCoordinate;\n    // const rightEyePosition = window.innerWidth - scaledRightEyeXCoordinate;\n    const leftEyeYPosition = leftEye.y;\n\n    // const middleEyes = leftEyePosition - rightEyePosition / 2;\n\n    // onFaceMove(middleEyes, leftEyeYPosition);\n    onFaceMove(leftEyePosition, leftEyeYPosition);\n  }\n}\n\nasync function animate() {\n  requestAnimationFrame(animate);\n\n  const poses = await detector?.estimatePoses(video);\n  getFaceCoordinates(poses);\n\n  // set the projection matrix to encompass the portal's frame\n  CameraUtils.frameCorners(\n    camera,\n    bottomLeftCorner,\n    bottomRightCorner,\n    topLeftCorner,\n    false\n  );\n\n  renderer.render(scene, camera);\n}\n\nconst App = () => {\n  useEffect(async () => {\n    init();\n    await setup();\n    animate();\n  }, []);\n  return <></>;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}